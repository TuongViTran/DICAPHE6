document.addEventListener("DOMContentLoaded", function () {
    // X·ª≠ l√Ω form t·∫°o b√†i vi·∫øt
    const createForm = document.getElementById("createPostForm");
    if (createForm) {
        handleAjaxForm(createForm, "create");
    }

    // X·ª≠ l√Ω t·∫•t c·∫£ form ch·ªânh s·ª≠a b√†i vi·∫øt
    const editForms = document.querySelectorAll('[id^="editPostForm"]');
    editForms.forEach((form) => {
        handleAjaxForm(form, "edit");
    });

    // H√†m x·ª≠ l√Ω form g·ª≠i Ajax
    function handleAjaxForm(form, type) {
        form.addEventListener("submit", async function (e) {
            e.preventDefault(); // Ch·∫∑n submit truy·ªÅn th·ªëng

            // C·∫≠p nh·∫≠t CKEditor n·ªôi dung tr∆∞·ªõc khi g·ª≠i
            if (typeof CKEDITOR !== "undefined") {
                for (let instance in CKEDITOR.instances) {
                    CKEDITOR.instances[instance].updateElement();
                }
            }

            const formData = new FormData(form);

            // Ph∆∞∆°ng th·ª©c ƒë∆∞·ª£c s·ª≠ d·ª•ng cho vi·ªác t·∫°o hay c·∫≠p nh·∫≠t
            const method = type === "edit" ? "POST" : "POST"; // üõ† PUT c·∫ßn _method spoofing ·ªü backend
            if (type === "edit") {
                formData.append("_method", "PUT"); // Th√™m _method=PUT n·∫øu l√† edit
            }

            try {
                const response = await fetch(form.action, {
                    method: method,
                    headers: {
                        "X-CSRF-TOKEN": document.querySelector(
                            'input[name="_token"]'
                        ).value,
                    },
                    body: formData,
                });

                if (!response.ok) {
                    if (response.status === 422) {
                        const data = await response.json();
                        showErrors(form, data.errors); // Hi·ªÉn th·ªã l·ªói validate
                    } else {
                        const errorText = await response.text();
                        console.error("Server error:", errorText);
                        alert(
                            "C√≥ l·ªói x·∫£y ra tr√™n server. Vui l√≤ng th·ª≠ l·∫°i sau!"
                        );
                    }
                } else {
                    const data = await response.json();
                    alert(
                        data.message ||
                            (type === "create"
                                ? "T·∫°o b√†i vi·∫øt th√†nh c√¥ng!"
                                : "C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!")
                    );

                    // ƒê√≥ng modal sau khi x·ª≠ l√Ω th√†nh c√¥ng
                    const modal = bootstrap.Modal.getInstance(
                        form.closest(".modal")
                    );
                    if (modal) {
                        modal.hide();
                    }

                    // Reload l·∫°i trang ho·∫∑c load l·∫°i danh s√°ch b√†i vi·∫øt
                    location.reload();
                }
            } catch (error) {
                console.error("L·ªói fetch:", error);
                alert(
                    "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server. Vui l√≤ng ki·ªÉm tra l·∫°i m·∫°ng!"
                );
            }
        });
    }

    // H√†m hi·ªÉn th·ªã l·ªói (n·∫øu c√≥)
    function showErrors(form, errors) {
        // X√≥a l·ªói c≈©
        form.querySelectorAll(".invalid-feedback").forEach((el) => el.remove());
        form.querySelectorAll(".is-invalid").forEach((el) =>
            el.classList.remove("is-invalid")
        );

        // Duy·ªát qua c√°c l·ªói v√† hi·ªÉn th·ªã l√™n c√°c tr∆∞·ªùng t∆∞∆°ng ·ª©ng
        for (const [field, messages] of Object.entries(errors)) {
            const input = form.querySelector(`[name="${field}"]`);
            if (input) {
                input.classList.add("is-invalid"); // Th√™m class is-invalid

                const div = document.createElement("div");
                div.classList.add("invalid-feedback");
                div.innerText = messages[0]; // L·∫•y th√¥ng b√°o l·ªói ƒë·∫ßu ti√™n

                // N·∫øu input n·∫±m trong form-group ho·∫∑c input-group, th√™m l·ªói v√†o sau
                if (input.parentNode) {
                    input.parentNode.appendChild(div);
                }
            }
        }
    }
});
document.addEventListener("DOMContentLoaded", function () {
    const deleteForms = document.querySelectorAll(".delete-post-form");

    deleteForms.forEach((form) => {
        form.addEventListener("submit", function (e) {
            const confirmed = confirm(
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y kh√¥ng?"
            );
            if (!confirmed) {
                e.preventDefault(); // N·∫øu kh√¥ng ƒë·ªìng √Ω th√¨ ch·∫∑n submit
            }
        });
    });
});
